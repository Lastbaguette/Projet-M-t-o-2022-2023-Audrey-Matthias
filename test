#!/bin/bash

	
		
function Help(){
	
	printf "Use one file with .csv \n";
	printf "'-f' file.csv :  select one file\n";
	printf "You can select location  :\n";
	printf "'-F' :  Corse\n";
	printf "'-G' :  Guyane\n";
	printf "'-O' :  Indian Ocean\n";
	printf "'-Q' :  Artique\n";
	printf "'-A' :  Antilles\n";
	printf "'-S' :  Saint-Pierre et Miquelon\n";
        printf "You need to use one option\n";                          # utiliser uniq a la fin
	printf "user commands  :\n";
	printf "'-h' :  sort by height descending.  \n";
	printf "'-m' :  sort by maximum moisture descending. \n";
	printf "'-w' :  sort by average winds for each station increasing.\n";
	printf "'-p' :  sort by atmospherique pressure with mode 1 or 2 or 3 \n";
	printf "        1: in order of station increasing\n"
	printf "        2: in order of average pressure\n"
	printf "        3: in order of date and with order of station increasing\n"
	printf "'-t' :  sort by temperature with mode 1 or 2 or 3 \n";
	printf "        1: in order of station increasing\n"
	printf "        2: in order of average temperature\n"
	printf "        3: in order of date and with order of station increasing\n"
	printf "change type of sort: \n";
	printf "'--avl'\n";
	printf "'--avl'\n";
	printf "'--tab'\n";
	
	printf "\nManual:\n";
	printf "'--help'\n";
	
	exit 1
}


function error(){
        printf "You need to use one option\n";                          # utiliser uniq a la fin
	printf "user commands  :\n";
	printf "'-h' :  sort by height in decreasing order.  \n";
	printf "'-m' :  sort by maximum moisture in decreasing order. \n";
	printf "'-p' :  sort by atmospheric pressure with mode 1 or 2 or 3 \n";
	printf "'-t' :  sort by temperature with mode 1 or 2 or 3 \n";
	printf "'-w' :  sort by average winds for each station in rising.\n";
	exit 1
}

function delete_files(){                       #general file deleted  
	rm -f tmpsort;
	rm -f endsort;
}

function MinMaxAvg_StationP(){
        
 	tail -n+2  <  $a | cut -d ";" -f1,2,7 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
	 # Id (1), Date(2), Pressure(7), tmp (0), coordinates(10)
	 touch endsort;
	./meteo/sort tmpsort endsort -r -m1 --avl		
	gnuplot -p -c Pminmax.gp
		        
	delete_files

}

function DateP(){
	tail -n+2  <  $a | cut -d ";" -f1,2,7 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
         # Id (1), Date(2), Pressure(7), tmp (0), coordinates(10)
        touch endsort;
        ./meteo/sort tmpsort endsort -r -m2 --avl		
	gnuplot -p -c P2.gp
		 
        delete_files
}

function Sort3P(){

        tail -n+2  <  $a | cut -d ";" -f1,2,7 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
        # Id (1), Date(2), Pressure(7), tmp (0), coordinates(10)
        touch endsort;
        ./meteo/sort tmpsort endsort -r -m3 --"nsort"		
	gnuplot -p -c P3.gp
        delete_files
}

function Sort3T(){
        
        tail -n+2  <  $a | cut -d ";" -f1,2,11 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
      	# Id (1), Date(2), Temperature(11), tmp (0), coordinates(10)
      	touch endsort;
       
        ./meteo/sort tmpsort endsort -r -m3 --"nsort"		
	gnuplot -p -c T3.gp
	
        delete_files
}

function MinMaxAvg_StationT(){
        
        tail -n+2  <  $a | cut -d ";" -f1,2,11 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
        # Id (1), Date(2), Temperature(11), tmp (0), coordinates(10)
       touch endsort;
        #appel tri d'audrey croissant
       	./meteo/sort tmpsort endsort -r -m2 --"nsort"		
	gnuplot -p -c Tminmax.gp

        delete_files
}

function DateT(){
	
	tail -n+2  <  $a | cut -d ";" -f1,2,11 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
       # Id (1), Date(2), Temperature(11), tmp (0), coordinates(10)
       touch endsort;
       	./meteo/sort tmpsort endsort -r -m2 --"nsort"		
	gnuplot -p -c T2.gp

        delete_files
        
}

  if [ $# == 0 ];
then 
	error;
	exit 1
fi

	b=${!#}	 # take the last argument for the file to use to simplify the notation


	
	

 
		if [ -e "tmp" ];then
			rm tmp
		fi
		nsort="avl"
		Argn=""
		
		a=$b
		i=1
		# handle double dash -- options
		for arg in $@ ; do
			case "$arg" in
				
				
			        --avl)  nsort='avl'
			        	;;
				--tab)  nsort='tab'
					;;	
				--abr)  nsort='abr'
					;;
				--help) Help
					;;
				-f)	i=$(( $i+1 ))			#take file with -f in priority
					a=${!i}
					b=$a			
					;;
				--*) error
					;;
				*)	i=$(( $i+1 ))
					;;
			esac
		done	
		
		if [ ! -e "$a" ]; then
			  echo " we can't use the file"
			  exit 1
		fi
				
		while getopts 'f:e:a:g:d:FGOQASmwp:t:h' OPTION; do          #selection mode of sort with options
		case "$OPTION" in 
		  	
		  	
		  	
		      	f)			
		      			;;	
		      		      	
		      	a)	argA="$OPTARG"
				min=$(echo $argA | cut -d " " -f1)
				max=$(echo $argA | cut -d " " -f2)	
				
				if [[ $max =~ ^-?[0-9]+$ || $max =~ ^-?[0-9]*\.[0-9]+$ ]] && [[ $min =~ ^-?[0-9]+$ || $min =~ ^-?[0-9]*\.[0-9]+$ ]] ; then
						
					exit 1
				fi
				
			    	if [ 1 != `echo "$min >= -90 && $min <= 90 && $max >= -90 && $max <= 90" | bc` ] ; then
					echo "yo" 	
					exit 1
	    			fi
	    			
			    	if [ $min -gt $max ] ; then
				       	tmpmin=$min
				       	min=$max
				       	max=$tmpmin
		       		fi
			    																																					
				awk -F '[;,]' '{if( $10>='$min' && $10<='$max'){print}}'  $a  > tmp
				a=tmp	
	    			;;
    				
	    		g)	argG="$OPTARG"
				min=$(echo $argG | cut -d " " -f1)
				max=$(echo $argG | cut -d " " -f2)	
				
				if [[ $max =~ ^-?[0-9]+$ || $max =~ ^-?[0-9]*\.[0-9]+$ ]] && [[ $min =~ ^-?[0-9]+$ || $min =~ ^-?[0-9]*\.[0-9]+$ ]] ; then
						
				
			    	if [ 1 != `echo "$min >= -180 && $min <= 180 && $max >= -180 && $max <= 180" | bc` ] ; then
					echo "yo" 	
					exit 1
	    			fi
	    			
			    	if [ $min -gt $max ] ; then
				       	tmpmin=$min
				       	min=$max
				       	max=$tmpmin
		       		fi
			    																																					
				awk -F '[;,]' '{if( $11>='$min' && $11<='$max'){print}}'  $a  > tmp
				a=tmp		
	  			
	  			
	    			
	    			else
	    			 exit 1
	    			fi
		      		;;
		      		
		      	d)	argD="$OPTARG"
				min=$(echo $argD | cut -d " " -f1)
				max=$(echo $argD | cut -d " " -f2)
			    	
			    	if echo "$min" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}' && echo "$max" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}' ; then
	  				if [[ $min > $max ]]; then
			       			tmp=$min
			       			min=$max
			       			max=$tmp
	       				fi
			    	
				    	awk -F";" '$2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}/ && $2 >= "'"$min"'" && $2 <= "'"$max"'" {print}' $a > tmp
					a=tmp
						
	  				
	  			else 
	  			
	  			echo "arguments is in the format yyyy-mm-dd"
	  			exit 1
	    			fi
	    			;;
		      	                 	
			F) 	awk -F '[;,]' '{if( $10>=41 && $10<=52 && $11>=-5 && $11<=10 ){print}}'< $b | grep ';'.....$  >  tmps1 #longitude 52>=x>=41 latitude -5<=y<=10 
				a=tmp
				rm tmps1 
				;;
			G) 	awk -F '[;,]' '{if( $10>=1 && $10<=6 && $11>=-54 && $11<=-55 ){print}}' $b >  tmp2           #longitude -54>=x>=-55 latitude 1<=y<=6 
				cat tmp2 >> tmp     
				a=tmp
				rm tmp2               
				;;
			O)	awk -F '[;,]' '{if( $10>=-22 && $10<=-11 && $11>=44  && $11<=59 ){print}}' $b >  tmp3   		 #co of Indian Ocean island fr longitude 44>=x>=59 latitude -22<=y<=-11 
				cat tmp3 >> tmp 
				a=tmp
				rm tmp3
				;;
			Q) 	awk -F '[;,]' '{if( $10>=-45 ){print}}' $b >  tmp4           # co of Antartique Fr latitude y<=-45  
				cat tmp4 >> tmp 
				a=tmp
				rm tmp4
				;;
			A)	awk -F '[;,]' '{if( $10>=11 && $10<=19 && $11>=-64 && $11<=-58 ){print}}' $b >  tmp5 		#co of Antilles Fr longitude -64<=y<=-58 latitude 19>=x>=11  
				cat tmp5 >> tmp 
				a=tmp
				rm tmp5
				;;
			S) 	awk -F '[;,]' '{if( $10>=46 && $10<=48 && $11>=-56 && $11<=-57 ){print}}' $b >  tmp6           #co of Saint-Pierre-et-Miquelon longitude -56<=y<=-57 latitude  48>=x>=46 
				cat tmp6 >> tmp
				a=tmp
				rm tmp6
				;;
				
			m)	Argn="m"  #save arg
				;;

			w) 	Argn="w" #save arg
				;;
		 
			p)  	argP="$OPTARG" #save arg and arg 2
			   	Argn="p"
				;;
				
			t)      argT="$OPTARG" #save arg and arg 2
				Argn="t"
				;;
				
			h)      Argn="h" #save arg 
				;;
				
			?) 	echo "error arg"
				exit 1
				;;
			esac
		done
		
					
		if [[ -z "$Argn" ]]; then
			echo "You need to select one option : -h, -m, -t, -p, -w"
			exit 1
		else 
			case $Argn in
					
			m)	tail -n+2  <  $a | cut -d ";" -f1,2,6 | sed 's/$/ 0/' |  paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort  # Id (1), Date(2), Moisture(6), tmp (0), coordinates(10)
				touch endsort;
				./meteo/sort tmpsort endsort -r -m --"nsort"		
				gnuplot -p -c M.gp		
				delete_files

				;;

			w) 	tail -n+2  <  $a | cut -d ";" -f1,2,4,5 | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
				# Id (1), Date(2), speed(4), orientation(5), coordinates(10)	
				touch endsort;
				./meteo/sort tmpsort endsort -r -w --"nsort"		
				gnuplot -p -c W.gp		
				delete_files
				;;
		 
			p)  	if [ "1" == "$argP" ];
				then
					MinMaxAvg_StationP;
				
				elif [ "2" == "$argP" ];
				then
					DateP;
				
				elif [ "3" == "$argP" ];
				then
					Sort3P;
				else 
				
					printf "select one mode :\n"
					printf "        1: in order of station increasing\n"
					printf "        2: in order of average pressure\n"
					printf "        3: in order of date and with order of station increasing\n"
				fi
				
				;;
			t)      if [ "1" == "$argT" ];
				then
					MinMaxAvg_StationT;
				
				elif [ "2" == "$argT" ];
				then
					DateT;
				
				elif [ "3" == "$argT" ];
				then 
				        Sort3T;
				
				else 
				
					printf "select one mode :\n"
					printf "        1: in order of station increasing\n"
					printf "        2: in order of average temperature\n"
					printf "        3: in order of date and with order of station increasing\n"
				fi
					
				;;
			h)     	 tail -n+2  <  $a | cut -d ";" -f1,2,14 | sed 's/$/ 0/' | paste -d " " - <(cut -d ";" -f10 < $a |tail -n+2 ) | tr '[;,]' ' ' | awk -F' ' '{if (NF==6) print $0}' > tmpsort
				# Id (1), Date(2), Height(14), tmp (0), coordinates(10)	
				touch endsort;
				#appel tri d'audrey decroissant
				./meteo/sort tmpsort endsort -r -m --"nsort"		
				gnuplot -p -c H.gp
				
				;;

			*)	error
				;;
			esac
		
		fi
		
	exit 1
	
	fi
	
	printf "Can you call an existing filename at the end of your command\n"
	exit 1


